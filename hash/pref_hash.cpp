// *****************************************************************************
// 版权所有（C）2022-2023，风一样的网络
// 保留所有权利
// *****************************************************************************
// 作者 : 风一样的少年
// 版本 : 1.0
// 功能说明:
//           main
// *****************************************************************************

#include <stdio.h>
#include "hmac_sha2.h"
#include "machine_id.h"
#include "pref_hash.h"
#include "base64.h"
#include "string.h"
#include "malloc.h"

const unsigned char default_seed[64] = {
	0xE7, 0x48, 0xF3, 0x36, 0xD8, 0x5E, 0xA5, 0xF9, 0xDC, 0xDF, 0x25, 0xD8,
	0xF3, 0x47, 0xA6, 0x5B, 0x4C, 0xDF, 0x66, 0x76, 0x00, 0xF0, 0x2D, 0xF6,
	0x72, 0x4A, 0x2A, 0xF1, 0x8A, 0x21, 0x2D, 0x26, 0xB7, 0x88, 0xA2, 0x50,
	0x86, 0x91, 0x0C, 0xF3, 0xA9, 0x03, 0x13, 0x69, 0x68, 0x71, 0xF3, 0xDC,
	0x05, 0x82, 0x37, 0x30, 0xC9, 0x1D, 0xF8, 0xBA, 0x5C, 0x4F, 0xD9, 0xC8,
	0x84, 0xB5, 0x05, 0xA8
};

//
// size = 294
//
unsigned char kWebstoreSignaturesPublicKey[] = {
	0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
	0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
	0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0x8f, 0xfb, 0xbf,
	0x5c, 0x37, 0x63, 0x94, 0x3c, 0xb0, 0xee, 0x01, 0xc4, 0xb5, 0xa6, 0x9a,
	0xb1, 0x9f, 0x46, 0x74, 0x6f, 0x16, 0x38, 0xa0, 0x32, 0x27, 0x35, 0xdd,
	0xf0, 0x71, 0x6b, 0x0e, 0xdc, 0xf6, 0x25, 0xcb, 0xb2, 0xed, 0xea, 0xfb,
	0x32, 0xd5, 0xaf, 0x1e, 0x03, 0x43, 0x03, 0x46, 0xf0, 0xa7, 0x39, 0xdb,
	0x23, 0x96, 0x1d, 0x65, 0xe5, 0x78, 0x51, 0xf0, 0x84, 0xb0, 0x0e, 0x12,
	0xac, 0x0e, 0x5b, 0xdc, 0xc9, 0xd6, 0x4c, 0x7c, 0x00, 0xd5, 0xb8, 0x1b,
	0x88, 0x33, 0x3e, 0x2f, 0xda, 0xeb, 0xaa, 0xf7, 0x1a, 0x75, 0xc2, 0xae,
	0x3a, 0x54, 0xde, 0x37, 0x8f, 0x10, 0xd2, 0x28, 0xe6, 0x84, 0x79, 0x4d,
	0x15, 0xb4, 0xf3, 0xbd, 0x3f, 0x56, 0xd3, 0x3c, 0x3f, 0x18, 0xab, 0xfc,
	0x2e, 0x05, 0xc0, 0x1e, 0x08, 0x31, 0xb6, 0x61, 0xd0, 0xfd, 0x9f, 0x4f,
	0x3f, 0x64, 0x0d, 0x17, 0x93, 0xbc, 0xad, 0x41, 0xc7, 0x48, 0xbe, 0x00,
	0x27, 0xa8, 0x4d, 0x70, 0x42, 0x92, 0x05, 0x54, 0xa6, 0x6d, 0xb8, 0xde,
	0x56, 0x6e, 0x20, 0x49, 0x70, 0xee, 0x10, 0x3e, 0x6b, 0xd2, 0x7c, 0x31,
	0xbd, 0x1b, 0x6e, 0xa4, 0x3c, 0x46, 0x62, 0x9f, 0x08, 0x66, 0x93, 0xf9,
	0x2a, 0x51, 0x31, 0xa8, 0xdb, 0xb5, 0x9d, 0xb9, 0x0f, 0x73, 0xe8, 0xa0,
	0x09, 0x32, 0x01, 0xe9, 0x7b, 0x2a, 0x8a, 0x36, 0xa0, 0xcf, 0x17, 0xb0,
	0x50, 0x70, 0x9d, 0xa2, 0xf9, 0xa4, 0x6f, 0x62, 0x4d, 0xb6, 0xc9, 0x31,
	0xfc, 0xf3, 0x08, 0x12, 0xff, 0x93, 0xbd, 0x62, 0x31, 0xd8, 0x1c, 0xea,
	0x1a, 0x9e, 0xf5, 0x81, 0x28, 0x7f, 0x75, 0x5e, 0xd2, 0x27, 0x7a, 0xc2,
	0x96, 0xf5, 0x9d, 0xdb, 0x18, 0xfc, 0x76, 0xdc, 0x46, 0xf0, 0x57, 0xc0,
	0x58, 0x34, 0xc8, 0x22, 0x2d, 0x2a, 0x65, 0x75, 0xa7, 0xd9, 0x08, 0x62,
	0xcd, 0x02, 0x03, 0x01, 0x00, 0x01
};

unsigned char* GetSignaturesPublicKey(void* hHandle, char* name)
{
	int len = sizeof(kWebstoreSignaturesPublicKey);
	unsigned char* ret = (unsigned char*)malloc(len);
	char machine_id[64] = {0};
	hmac_sha256_ctx ctx;
	unsigned char hash[32] = {0};

	memset(ret,0,len);
	memcpy(ret,kWebstoreSignaturesPublicKey,len);

	if (!get_machine_id(hHandle, machine_id))
		strcpy(machine_id,"get the machine id faild");

	memcpy(ret + 32, machine_id, 64); // start 32 len 64

	hmac_sha256_init(&ctx, default_seed, sizeof(default_seed));
	hmac_sha256_update(&ctx, (unsigned char*)name, strlen(name));
	hmac_sha256_final(&ctx, hash, sizeof(hash));


	memcpy(ret + 128, hash, 32); // start 128 len 32

	return ret;
}

char* GetExtensionKey(unsigned char* SignaturesPublicKey)
{
	int len = sizeof(kWebstoreSignaturesPublicKey);
	char* b64buf = (char*)malloc(BASE64_SIZE(len));
	memset(b64buf,0,BASE64_SIZE(len));
	base64_encode(b64buf, BASE64_SIZE(len), SignaturesPublicKey, len);

	return b64buf;
}

char* GetExtensionID(unsigned char* SignaturesPublicKey)
{
	char* ret = (char*)malloc(33);
	int len = sizeof(kWebstoreSignaturesPublicKey);
	unsigned char hash[32] = {0};
	sha256_ctx ctx1;
	int i;

	sha256_init(&ctx1);
	sha256_update(&ctx1, SignaturesPublicKey, len);
	sha256_final(&ctx1, hash);

	memset(ret,0,33);
	for (i = 0; i < 16; ++ i)
	{
		sprintf(ret + i*2, "%02x", hash[i] & 0xFF);
	}

	for (i = 0; i < 32; ++ i)
		ret[i] = ret[i] < 97 ? ret[i] + 49 : ret[i] + 10;

	return ret;
}


int pref_hash_init(void* hHandle, struct pref_hash_context *context)
{
	memcpy(context->seed, default_seed, sizeof(default_seed));
	if (!get_machine_id(hHandle, context->machine_id))
		return 0;
	 printf("machine_id: %s\n", context->machine_id);
	return 1;
}

int pref_hash_calc(struct pref_hash_context *context, const char *path, const char *value, char *mac)
{
	hmac_sha256_ctx ctx;
	unsigned char hash[32];
	int i;
	hmac_sha256_init(&ctx, context->seed, sizeof(context->seed));
	hmac_sha256_update(&ctx, (unsigned char*)context->machine_id, strlen(context->machine_id));
	hmac_sha256_update(&ctx, (unsigned char*)path, strlen(path));
	hmac_sha256_update(&ctx, (unsigned char*)value, strlen(value));
	hmac_sha256_final(&ctx, hash, sizeof(hash));
	for (i = 0; i < 32; ++ i)
		sprintf(mac + i + i, "%02X", hash[i]);
	return 0;
}


int pref_hash_init_v53(void* hHandle, struct pref_hash_context *context)
{
	memcpy(context->seed, default_seed, sizeof(default_seed));
	if (!get_machine_id_v53(hHandle, context->machine_id))
		return 0;
	// printf("machine_id: %s\n", context->machine_id);
	return 1;
}

int pref_hash_calc_v53(struct pref_hash_context *context, const char *path, const char *value, char *mac)
{
	hmac_sha256_ctx ctx;
	unsigned char hash[32];
	int i;
	hmac_sha256_init(&ctx, context->seed, sizeof(context->seed));
	hmac_sha256_update(&ctx, (unsigned char*)context->machine_id, strlen(context->machine_id));
	hmac_sha256_update(&ctx, (unsigned char*)path, strlen(path));
	hmac_sha256_update(&ctx, (unsigned char*)value, strlen(value));
	hmac_sha256_final(&ctx, hash, sizeof(hash));
	for (i = 0; i < 32; ++ i)
		sprintf(mac + i + i, "%02X", hash[i]);
	return 0;
}


int pref_hash_init_2345(struct pref_hash_context *context)
{
	memset(context->seed, 0, sizeof(context->seed));
	return 1;
}

int pref_hash_calc_2345(struct pref_hash_context *context, const char *path, const char *value, char *mac)
{
	hmac_sha256_ctx ctx;
	unsigned char hash[32];
	int i;
	hmac_sha256_init(&ctx, context->seed, sizeof(context->seed));
	hmac_sha256_update(&ctx, (unsigned char*)path, strlen(path));
	hmac_sha256_update(&ctx, (unsigned char*)value, strlen(value));
	hmac_sha256_final(&ctx, hash, sizeof(hash));
	for (i = 0; i < 32; ++ i)
		sprintf(mac + i + i, "%02X", hash[i]);
	return 0;
}
